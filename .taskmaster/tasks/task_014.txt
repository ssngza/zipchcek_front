# Task ID: 14
# Title: Docker Compose 파일 작성
# Status: pending
# Dependencies: 12, 13
# Priority: medium
# Description: 프론트엔드 컨테이너와 API 서버 간의 네트워크 통신을 위한 Docker Compose 설정 파일을 작성합니다.
# Details:
1. 기본 Docker Compose 파일 구조 설정:
   - 버전 정의 (version: '3.8')
   - 서비스 정의 (frontend, api)
   - 네트워크 정의 (app-network)

2. 프론트엔드 서비스 구성:
   - 이미지 또는 빌드 설정 (Dockerfile 참조)
   - 포트 매핑 설정 (외부 3000 포트 → 내부 80 포트)
   - 환경 변수 설정 (API 서버 URL 등)
   - 재시작 정책 설정 (restart: unless-stopped)
   - 네트워크 연결 설정 (app-network)
   - 볼륨 마운트 설정 (필요한 경우)
   - 컨테이너 이름 지정 (container_name: frontend)

3. API 서버 연결 설정:
   - 외부 API 서버 접근을 위한 환경 변수 구성
   - API 서버 URL 및 인증 정보 설정
   - 네트워크 통신을 위한 DNS 설정
   - 프론트엔드에서 API 서버로의 요청 프록시 설정

4. 네트워크 구성:
   - 커스텀 브리지 네트워크 생성 (app-network)
   - 네트워크 드라이버 및 서브넷 설정
   - 컨테이너 간 통신 최적화 설정

5. 환경 변수 관리:
   - .env 파일 통합
   - 개발/테스트/프로덕션 환경별 설정 분리
   - 민감한 정보 처리 방법 구현

6. 볼륨 설정 (필요한 경우):
   - 데이터 지속성을 위한 볼륨 정의
   - 호스트와 컨테이너 간 파일 공유 설정

7. 로깅 및 모니터링 설정:
   - 로그 드라이버 설정
   - 로그 회전 정책 구성

8. 보안 강화 설정:
   - 불필요한 권한 제한
   - 네트워크 격리 설정
   - 보안 관련 환경 변수 관리

# Test Strategy:
1. 로컬 환경에서 Docker Compose 파일 검증:
   - `docker-compose config` 명령으로 설정 파일 문법 오류 확인
   - 환경 변수가 올바르게 확장되는지 확인

2. 컨테이너 빌드 및 실행 테스트:
   - `docker-compose build` 명령으로 이미지 빌드 성공 확인
   - `docker-compose up -d` 명령으로 컨테이너 실행 및 정상 작동 확인
   - `docker-compose ps` 명령으로 모든 서비스가 실행 중인지 확인

3. 네트워크 통신 테스트:
   - 프론트엔드 컨테이너에서 API 서버로의 연결 테스트
   - 외부에서 프론트엔드 접근 테스트 (http://localhost:3000)
   - 네트워크 격리가 올바르게 구성되었는지 확인

4. 포트 매핑 테스트:
   - 외부 3000 포트가 내부 80 포트로 올바르게 매핑되는지 확인
   - 포트 충돌이 없는지 확인

5. 환경 변수 테스트:
   - 다양한 환경(.env 파일)에서 설정이 올바르게 로드되는지 확인
   - 민감한 정보가 안전하게 처리되는지 확인

6. 볼륨 마운트 테스트 (해당되는 경우):
   - 데이터 지속성 확인 (컨테이너 재시작 후 데이터 유지)
   - 호스트와 컨테이너 간 파일 공유 확인

7. 로깅 테스트:
   - `docker-compose logs` 명령으로 로그 출력 확인
   - 로그 형식 및 내용 검증

8. 종료 및 정리 테스트:
   - `docker-compose down` 명령으로 모든 리소스가 올바르게 정리되는지 확인
