{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 저장소 및 개발 환경 설정",
        "description": "ZipCheck 프로젝트의 저장소를 초기화하고 프론트엔드 개발 환경을 설정합니다.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "1. ZipCheck용 새로운 Git 저장소를 생성합니다.\n2. TypeScript와 함께 Create React App을 사용하여 프론트엔드 프로젝트를 설정합니다.\n3. TailwindCSS (v3.3.2)와 Shadcn UI (v0.1.0)를 설치하고 구성합니다.\n4. 코드 품질을 위해 ESLint (v8.41.0)와 Prettier (v2.8.8)를 설정합니다.\n5. 기본 프로젝트 구조와 README.md를 생성합니다.",
        "testStrategy": "1. 모든 종속성이 올바르게 설치되고 구성되었는지 확인합니다.\n2. 개발 서버가 오류 없이 시작되는지 확인합니다.",
        "subtasks": [
          {
            "id": 1,
            "title": "Git 저장소 생성",
            "description": "ZipCheck 프로젝트를 위한 새로운 Git 저장소를 생성합니다.",
            "status": "done",
            "dependencies": [],
            "details": "1. GitHub에서 새 저장소를 생성합니다.\n2. 저장소 이름은 'zipcheck'으로 설정합니다.\n3. 저장소를 로컬 환경에 클론합니다.",
            "testStrategy": "저장소가 성공적으로 생성되고 로컬 환경에 클론되었는지 확인합니다."
          },
          {
            "id": 2,
            "title": "React 프로젝트 설정",
            "description": "TypeScript와 함께 Create React App을 사용하여 프론트엔드 프로젝트를 초기화합니다.",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "1. Create React App을 사용하여 TypeScript 템플릿으로 프로젝트를 생성합니다.\n2. 필요한 기본 패키지를 설치합니다.\n3. 프로젝트 구조를 확인하고 불필요한 파일을 제거합니다.",
            "testStrategy": "프로젝트가 오류 없이 생성되고 `npm start` 명령으로 개발 서버가 정상적으로 실행되는지 확인합니다."
          },
          {
            "id": 3,
            "title": "UI 라이브러리 설정",
            "description": "TailwindCSS와 Shadcn UI를 설치하고 구성합니다.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "1. TailwindCSS (v3.3.2)를 설치하고 구성합니다.\n2. Shadcn UI (v0.1.0)를 설치하고 구성합니다.\n3. 기본 테마와 색상을 설정합니다.",
            "testStrategy": "TailwindCSS와 Shadcn UI 컴포넌트가 프로젝트에서 올바르게 작동하는지 간단한 테스트 페이지를 만들어 확인합니다."
          },
          {
            "id": 4,
            "title": "코드 품질 도구 설정",
            "description": "ESLint와 Prettier를 설정하여 코드 품질을 유지합니다.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "1. ESLint (v8.41.0)를 설치하고 구성합니다.\n2. Prettier (v2.8.8)를 설치하고 구성합니다.\n3. ESLint와 Prettier 통합을 설정합니다.\n4. VS Code 설정 파일을 추가하여 편집기 통합을 개선합니다.",
            "testStrategy": "코드 품질 도구가 올바르게 작동하는지 확인하기 위해 간단한 코드 스타일 오류를 수정하고 린트 명령을 실행합니다."
          },
          {
            "id": 5,
            "title": "프로젝트 구조 및 문서화",
            "description": "기본 프로젝트 구조를 설정하고 README.md 파일을 작성합니다.",
            "status": "done",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "1. 프로젝트에 필요한 폴더 구조를 생성합니다 (components, pages, hooks, utils 등).\n2. README.md 파일을 작성하여 프로젝트 설정 및 실행 방법을 문서화합니다.\n3. 기본 컴포넌트와 페이지 예제를 추가합니다.\n<info added on 2025-06-23T15:12:01.076Z>\n1. **프로젝트 폴더 구조 생성**\n   - src/pages/ - 페이지 컴포넌트\n   - src/hooks/ - 커스텀 React 훅  \n   - src/types/ - TypeScript 타입 정의\n   - src/services/ - API 서비스\n   - src/constants/ - 애플리케이션 상수\n   - src/assets/ - 정적 자산\n\n2. **기본 컴포넌트 및 파일 생성**\n   - HomePage.tsx - 메인 홈페이지 컴포넌트 (ZipCheck 소개, 3개 주요 기능 섹션)\n   - types/index.ts - Property, User, RiskAnalysis 등 핵심 타입 정의\n   - constants/index.ts - APP_CONFIG, API_ENDPOINTS, RISK_LEVELS 등 상수\n   - hooks/useLocalStorage.ts - localStorage 커스텀 훅\n   - services/api.ts - 재사용 가능한 API 서비스 클래스\n\n3. **App.tsx 업데이트**\n   - 기존 테스트 UI를 제거하고 HomePage 컴포넌트로 교체\n   - 깔끔한 진입점 구성\n\n4. **포괄적인 README.md 작성**\n   - 프로젝트 소개 및 주요 기능 설명\n   - 기술 스택 및 프로젝트 구조 문서화\n   - 설치/실행 방법 상세 가이드\n   - 개발 환경 설정 가이드 (ESLint, Prettier)\n   - 사용 가능한 npm 스크립트 설명\n   - 환경 변수 및 배포 방법 문서화\n\n5. **테스트 완료**\n   - 프로덕션 빌드 성공 (dist/ 폴더 생성, 172.98 kB)\n   - ESLint 검사 통과 (경고 0개)\n   - 개발 서버 정상 실행 확인\n\n6. **구조적 개선 사항:**\n   - 명확한 폴더 분리로 코드 구조 개선\n   - TypeScript 타입 안정성 확보\n   - 재사용 가능한 API 서비스 패턴 구축\n   - 일관된 상수 관리 체계\n   - 전문적인 프로젝트 문서화\n\n7. **다음 단계 준비:**\n   - 라우팅 시스템 구현 준비 완료\n   - 컴포넌트 기반 구조 확립\n   - API 통신 기반 구조 마련\n</info added on 2025-06-23T15:12:01.076Z>",
            "testStrategy": "프로젝트 구조가 명확하게 정의되어 있고 README.md가 프로젝트 설정 및 실행에 필요한 모든 정보를 포함하는지 확인합니다."
          }
        ]
      },
      {
        "id": 2,
        "title": "로그인 화면 UI 개발",
        "description": "로그인 및 회원가입 화면 UI를 구현합니다. 임시 인증으로 로그인 버튼 클릭 시 메인 화면으로 이동합니다.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "1. React Router (v6.11.2)를 사용하여 기본 라우팅 설정\n2. Shadcn UI를 사용하여 로그인 화면 UI 컴포넌트 생성\n3. 로그인 폼 디자인 (이메일, 비밀번호 입력 필드)\n4. 로그인 버튼 클릭 시 메인 업로드 화면으로 이동하는 기능 구현\n5. 회원가입 화면 UI 생성 (기능 없이 UI만)\n6. 임시 사용자 상태 관리 (로그인/로그아웃 상태만)\n7. 네비게이션 컴포넌트 생성\n8. 반응형 디자인 적용",
        "testStrategy": "1. 로그인 화면 UI 렌더링 테스트\n2. 로그인 폼 입력 필드 동작 확인\n3. 로그인 버튼 클릭 시 메인 업로드 화면으로 정상 이동하는지 테스트\n4. 회원가입 화면 UI 렌더링 테스트\n5. 네비게이션 컴포넌트 동작 확인\n6. 반응형 디자인 다양한 화면 크기에서 테스트\n7. 임시 사용자 상태 변경 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "React Router 기본 라우팅 설정",
            "description": "React Router v6.11.2를 사용하여 기본 라우팅 구조를 설정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-06-23T15:18:15.172Z>\n✅ **완료된 작업:**\n1. **React Router 설치**: react-router-dom@^6.11.2 설치 완료\n2. **기본 라우팅 구조 설정**: \n   - BrowserRouter, Routes, Route 컴포넌트 사용\n   - 5개 기본 라우트 정의:\n     - \"/\" - HomePage (기존)\n     - \"/login\" - 로그인 페이지 (임시 플레이스홀더)\n     - \"/signup\" - 회원가입 페이지 (임시 플레이스홀더)\n     - \"/upload\" - 업로드 페이지 (임시 플레이스홀더)\n     - \"*\" - 404 페이지\n3. **빌드 테스트 성공**: 189.31 kB로 정상 빌드 완료\n\n**구현 상세:**\n- App.tsx에 Router 컴포넌트로 전체 애플리케이션 래핑\n- 각 페이지별 라우트 정의로 후속 작업 준비 완료\n- 404 페이지 처리로 잘못된 경로 접근 방어\n</info added on 2025-06-23T15:18:15.172Z>",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "로그인 화면 UI 컴포넌트 생성",
            "description": "Shadcn UI를 사용하여 로그인 화면의 기본 레이아웃과 컴포넌트를 생성합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-06-23T15:20:46.416Z>\n✅ **완료된 작업:**\n1. **Shadcn UI 컴포넌트 설치**: card, input, label 컴포넌트 추가\n2. **LoginPage 컴포넌트 생성**:\n   - 반응형 디자인 (min-h-screen, max-w-md)\n   - 그라데이션 배경 (blue-50 to indigo-100)\n   - 중앙 정렬 레이아웃\n   - ZipCheck 브랜드 로고 및 타이틀\n3. **UI 구성 요소**:\n   - Card 컴포넌트 기반 로그인 폼\n   - 이메일/비밀번호 입력 필드 (Label + Input)\n   - 로그인 버튼 (전체 너비)\n   - 회원가입/비밀번호 찾기 링크\n   - 구분선 및 푸터\n4. **라우팅 연결**: App.tsx에서 /login 경로를 LoginPage로 연결\n5. **네비게이션 링크**: HomePage의 \"시작하기\" 버튼을 로그인 페이지로 연결\n6. **빌드 테스트 성공**: 198.65 kB로 정상 빌드 완료\n\n**디자인 특징:**\n- 사용자 친화적 인터페이스\n- Shadcn UI 기반 일관된 디자인 시스템\n- 접근성 고려 (Label for 속성, required 필드)\n- 브랜드 아이덴티티 반영\n</info added on 2025-06-23T15:20:46.416Z>",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "로그인 폼 디자인 구현",
            "description": "이메일과 비밀번호 입력 필드를 포함한 로그인 폼을 디자인하고 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-06-23T15:22:36.386Z>\n✅ **완료된 작업:**\n1. **상태 관리 구현**:\n   - useState를 사용한 폼 데이터 관리 (email, password)\n   - 에러 상태 관리 (field별 에러 + 전체 에러)\n   - 로딩 상태 관리 (비동기 로그인 처리)\n\n2. **폼 검증 기능**:\n   - 실시간 입력 검증 (onChange 시 에러 제거)\n   - 이메일 형식 검증 (정규식 사용)\n   - 비밀번호 최소 길이 검증 (6자리 이상)\n   - 필수 필드 검증\n\n3. **사용자 경험 개선**:\n   - 입력 필드별 에러 메시지 표시\n   - 로딩 중 버튼 비활성화 및 텍스트 변경\n   - 에러 필드 시각적 표시 (빨간 테두리)\n   - 입력 중 실시간 에러 제거\n\n4. **데모 로그인 기능**:\n   - 임시 로그인 로직 구현 (test@example.com / 123456)\n   - localStorage 기반 로그인 상태 저장\n   - 로그인 성공 시 홈페이지 리다이렉트\n   - 1.5초 로딩 시뮬레이션\n\n5. **UI/UX 개선**:\n   - 로고 클릭 시 홈페이지 이동\n   - 데모 계정 정보 안내 박스 추가\n   - 입력 필드 placeholder 개선\n   - 접근성 고려 (disabled 상태 처리)\n\n6. **빌드 테스트 성공**: 200.55 kB로 정상 빌드 완료\n\n**핵심 기능:**\n- 완전한 폼 검증 시스템\n- 에러 핸들링 및 사용자 피드백\n- 반응형 로딩 상태\n- localStorage 기반 세션 관리\n</info added on 2025-06-23T15:22:36.386Z>",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "로그인 버튼 기능 구현",
            "description": "로그인 버튼 클릭 시 메인 업로드 화면으로 이동하는 기능을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "회원가입 화면 UI 생성",
            "description": "실제 기능 없이 회원가입 화면의 UI만 생성합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "임시 사용자 상태 관리 구현",
            "description": "로그인/로그아웃 상태만을 관리하는 임시 사용자 상태 관리 시스템을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "네비게이션 컴포넌트 생성",
            "description": "사용자 상태에 따른 네비게이션 컴포넌트를 생성합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "반응형 디자인 적용",
            "description": "로그인 및 회원가입 화면에 반응형 디자인을 적용합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "메인 업로드 화면 UI 개발",
        "description": "PDF 업로드가 가능한 메인 화면 UI를 구현합니다. 등기부 발급 가이드 버튼도 포함합니다.",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "1. 메인 업로드 화면 UI 디자인 및 구현\n2. PDF 드래그 앤 드롭 업로드 컴포넌트 UI 생성\n3. 파일 업로드 영역 디자인 (드래그 앤 드롭 안내 텍스트 포함)\n4. 업로드된 파일 정보 표시 컴포넌트 (파일명, 크기, 타입)\n5. \"등기부 발급 가이드\" 버튼 UI 추가\n6. 분석 시작 버튼 UI 구현\n7. 업로드 진행률 표시 UI\n8. 파일 제거 기능 UI\n9. 반응형 디자인 적용\n10. 메인 헤더 및 네비게이션 영역 구현",
        "testStrategy": "1. 메인 업로드 화면 UI 렌더링 테스트\n2. PDF 드래그 앤 드롭 업로드 컴포넌트 UI 동작 확인\n3. 파일 업로드 영역 상호작용 테스트\n4. 업로드된 파일 정보 표시 정확성 확인\n5. 등기부 발급 가이드 버튼 UI 렌더링 및 클릭 테스트\n6. 분석 시작 버튼 UI 동작 확인\n7. 업로드 진행률 표시 기능 테스트\n8. 파일 제거 기능 UI 테스트\n9. 반응형 디자인 다양한 화면 크기에서 테스트\n10. 헤더 및 네비게이션 컴포넌트 동작 확인",
        "subtasks": [
          {
            "id": 1,
            "title": "메인 레이아웃 구현",
            "description": "업로드 화면의 전체적인 레이아웃 구조 설계 및 구현",
            "dependencies": [],
            "details": "- 전체 페이지 그리드 레이아웃 설계\n- 컨테이너 및 섹션 구분\n- 여백 및 정렬 설정\n- 기본 색상 및 테마 적용\n- 테스트: 다양한 화면 크기에서 레이아웃 확인",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "드래그 앤 드롭 컴포넌트 개발",
            "description": "파일을 드래그하여 업로드할 수 있는 인터랙티브 컴포넌트 개발",
            "dependencies": [
              1
            ],
            "details": "- 드래그 앤 드롭 이벤트 핸들러 구현\n- 드래그 영역 시각적 피드백 추가\n- 파일 타입 검증 로직 구현\n- 다중 파일 처리 기능\n- 테스트: 다양한 파일 형식 및 크기로 드래그 앤 드롭 테스트",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "파일 업로드 영역 디자인",
            "description": "사용자가 파일을 업로드할 수 있는 영역의 디자인 및 구현",
            "dependencies": [
              1
            ],
            "details": "- 업로드 영역 시각적 디자인\n- 파일 선택 버튼 구현\n- 안내 텍스트 및 아이콘 추가\n- 호버 및 포커스 상태 스타일링\n- 테스트: 디자인 일관성 및 접근성 검증",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "업로드된 파일 정보 표시 컴포넌트",
            "description": "업로드된 파일의 이름, 크기, 형식 등 정보를 표시하는 컴포넌트 개발",
            "dependencies": [
              2,
              3
            ],
            "details": "- 파일 목록 UI 구현\n- 파일명, 크기, 형식 표시\n- 파일 상태 표시 (업로드 중, 완료, 오류)\n- 파일 아이콘 또는 썸네일 표시\n- 테스트: 다양한 파일 정보 표시 정확성 확인",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "등기부 발급 가이드 버튼 구현",
            "description": "사용자에게 등기부 발급 방법을 안내하는 가이드 버튼 구현",
            "dependencies": [
              1
            ],
            "details": "- 가이드 버튼 디자인 및 배치\n- 클릭 시 가이드 모달 또는 팝업 표시\n- 가이드 내용 작성 및 포맷팅\n- 가이드 이미지 또는 단계별 설명 추가\n- 테스트: 버튼 클릭 및 가이드 표시 기능 검증",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "분석 시작 버튼 구현",
            "description": "업로드된 파일의 분석을 시작하는 버튼 구현",
            "dependencies": [
              4
            ],
            "details": "- 버튼 디자인 및 배치\n- 활성/비활성 상태 관리\n- 클릭 이벤트 핸들러 구현\n- 로딩 상태 표시\n- 테스트: 버튼 상태 변화 및 클릭 이벤트 검증",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "업로드 진행률 UI 개발",
            "description": "파일 업로드 진행 상황을 시각적으로 표시하는 UI 개발",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "- 프로그레스 바 컴포넌트 구현\n- 퍼센트 표시 기능\n- 애니메이션 효과 추가\n- 업로드 속도 및 남은 시간 표시\n- 테스트: 다양한 업로드 속도에서 진행률 표시 정확성 확인",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "파일 제거 기능 UI",
            "description": "업로드된 파일을 제거할 수 있는 UI 요소 구현",
            "dependencies": [
              4
            ],
            "details": "- 파일 항목별 삭제 버튼 추가\n- 삭제 확인 다이얼로그 구현\n- 삭제 애니메이션 효과\n- 전체 파일 삭제 옵션\n- 테스트: 파일 제거 기능 및 UI 상태 업데이트 검증",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "반응형 디자인 적용",
            "description": "다양한 화면 크기에 대응하는 반응형 디자인 적용",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ],
            "details": "- 모바일, 태블릿, 데스크톱 레이아웃 설계\n- 미디어 쿼리 구현\n- 요소 크기 및 배치 조정\n- 터치 인터랙션 최적화\n- 테스트: 다양한 디바이스 및 화면 크기에서 UI 테스트",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "헤더 및 네비게이션 영역 구현",
            "description": "페이지 상단의 헤더와 네비게이션 요소 구현",
            "dependencies": [
              1
            ],
            "details": "- 로고 및 브랜딩 요소 배치\n- 네비게이션 메뉴 구현\n- 사용자 계정 정보 표시\n- 알림 및 도움말 아이콘 추가\n- 테스트: 네비게이션 링크 및 반응형 동작 검증",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "분석 중 로딩 화면 UI 개발",
        "description": "PDF 업로드 후 분석이 진행되는 동안 표시되는 로딩 화면 UI를 구현합니다.",
        "details": "1. 로딩 스피너 또는 프로그레스 바 컴포넌트 생성: Shadcn UI의 Progress 컴포넌트를 활용하여 원형 스피너와 선형 프로그레스 바 구현\n2. 분석 진행 상태를 나타내는 단계별 표시 UI: \"PDF 업로드 중\" → \"텍스트 추출 중\" → \"AI 분석 중\" → \"결과 생성 중\" 단계별 상태 표시\n3. 예상 소요 시간 표시 기능: 파일 크기 기반 예상 시간 계산 로직 구현 및 실시간 카운트다운 표시\n4. 분석 취소 버튼 UI (기능은 나중에 구현): 취소 버튼 컴포넌트 생성 및 비활성화 상태로 배치\n5. 로딩 중 애니메이션 효과 추가: CSS 애니메이션과 Framer Motion을 활용한 부드러운 로딩 애니메이션 구현\n6. 사용자에게 분석 과정을 설명하는 텍스트 표시: 각 단계별 설명 텍스트와 도움말 메시지 표시\n7. 반응형 디자인 적용: 모바일, 태블릿, 데스크톱 화면에 최적화된 레이아웃 구현\n8. 로딩 완료 시 분석 결과 화면으로 전환하는 UI 연결: React Router를 사용한 자동 페이지 전환 로직 구현\n9. 로딩 상태 관리를 위한 Context API 또는 상태 관리 라이브러리 활용\n10. 에러 발생 시 에러 메시지 표시 및 재시도 옵션 제공",
        "testStrategy": "1. 로딩 스피너 및 프로그레스 바 컴포넌트 렌더링 테스트\n2. 분석 단계별 상태 변경 시 UI 업데이트 정상 작동 확인\n3. 예상 소요 시간 계산 및 카운트다운 표시 기능 테스트\n4. 분석 취소 버튼 UI 렌더링 및 비활성화 상태 확인\n5. 로딩 애니메이션 효과 부드러운 작동 테스트\n6. 각 분석 단계별 설명 텍스트 정확한 표시 확인\n7. 다양한 화면 크기(모바일, 태블릿, 데스크톱)에서 반응형 디자인 테스트\n8. 로딩 완료 시 분석 결과 화면으로 자동 전환 기능 테스트\n9. 로딩 상태 관리 및 상태 변경 시 UI 동기화 테스트\n10. 에러 발생 시 에러 메시지 표시 및 재시도 옵션 동작 확인\n11. 다양한 파일 크기에 따른 예상 시간 계산 정확성 검증\n12. 로딩 화면 접근성(스크린 리더 지원, 키보드 네비게이션) 테스트",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "분석 결과 표시 개발",
        "description": "GPT의 분석 결과를 명확하고 실행 가능한 형태로 표시하는 사용자 인터페이스를 생성합니다.",
        "status": "in-progress",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "1. 위험 점수 시각화 컴포넌트 설계 (차트를 위해 react-chartjs-2 v5.2.0 사용).\n2. 식별된 잠재적 문제들의 상세 분석 뷰 생성.\n3. 사기 방지 단계를 위한 체크리스트 컴포넌트 구현.\n4. 계약서 준비 가이드라인 표시를 위한 컴포넌트 설계 및 구현.\n5. 분석 결과의 인쇄 친화적 버전 생성.\n6. 모바일 및 데스크톱 뷰를 위한 반응형 디자인 구현.\n7. 기술 용어에 대한 툴팁 및 설명 추가.\n8. 사용자가 분석의 정확성을 평가할 수 있는 피드백 메커니즘 구현.",
        "testStrategy": "1. 다양한 위험 수준 및 시나리오의 렌더링 테스트.\n2. 다양한 기기 및 화면 크기에서의 반응성 확인.\n3. 접근성 준수 확인 (WCAG 2.1).\n4. 인쇄 기능 테스트.\n5. 새로운 데이터를 받았을 때 모든 컴포넌트가 올바르게 업데이트되는지 확인.",
        "subtasks": [
          {
            "id": 2,
            "title": "피드백 데이터 저장 기능 구현",
            "description": "피드백 데이터를 저장하고 관리하는 기능을 구현합니다.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "사용자가 제출한 피드백 데이터(별점, 코멘트 등)를 로컬 스토리지에 저장하는 기능을 구현합니다. 향후 백엔드 연동을 위한 인터페이스도 설계합니다. 테스트 전략: 데이터 저장 및 불러오기 기능, 오류 처리, 데이터 구조 검증.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "피드백 제출 후 감사 메시지 및 안내 기능 구현",
            "description": "피드백 제출 후 사용자에게 감사 메시지를 표시하고 추가 안내를 제공하는 기능을 구현합니다.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "피드백 제출 후 사용자에게 감사 메시지와 함께 다음 단계 안내를 제공하는 UI를 구현합니다. 토스트 알림이나 모달 형태로 표시하며, 필요에 따라 추가 정보나 링크를 포함할 수 있습니다. 테스트 전략: 알림 표시 타이밍, 메시지 내용 확인, 모바일 환경에서의 표시 테스트.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "피드백 컴포넌트 통합 및 테스트",
            "description": "피드백 컴포넌트를 분석 결과 페이지에 통합하고 전체 기능을 테스트합니다.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "개발된 피드백 컴포넌트를 분석 결과 페이지에 적절히 배치하고 통합합니다. 전체 기능이 의도한 대로 동작하는지 테스트하고, 필요한 경우 UI/UX를 조정합니다. 테스트 전략: 통합 후 전체 페이지 레이아웃, 피드백 제출 프로세스 완료, 다양한 디바이스 및 브라우저에서의 호환성 테스트.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "반응형 디자인 적용",
            "description": "모든 결과 페이지 컴포넌트에 반응형 디자인을 적용합니다.",
            "status": "done",
            "dependencies": [],
            "details": "분석 결과 페이지의 모든 컴포넌트가 다양한 화면 크기와 디바이스에서 최적화된 사용자 경험을 제공하도록 반응형 디자인을 적용합니다. 모바일, 태블릿, 데스크톱 환경에서 모두 사용하기 편리하도록 구현합니다.",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "RiskScoreGauge 컴포넌트 반응형 개선",
            "description": "모바일 환경에서 더 잘 보이도록 패딩, 여백, 폰트 크기 등을 조정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "위험 점수 게이지 컴포넌트가 모바일 환경에서 최적화되도록 패딩, 여백, 폰트 크기 등을 조정합니다. 작은 화면에서도 중요 정보가 명확하게 표시되도록 합니다.",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "FraudPreventionChecklist 컴포넌트 반응형 개선",
            "description": "모바일 환경에서 더 잘 보이도록 패딩, 여백, 폰트 크기 등을 조정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "사기 방지 체크리스트 컴포넌트가 모바일 환경에서 최적화되도록 패딩, 여백, 폰트 크기 등을 조정합니다. 작은 화면에서도 체크리스트 항목이 명확하게 표시되도록 합니다.",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "PotentialIssuesAnalysis 컴포넌트 반응형 개선",
            "description": "모바일 환경에서 더 잘 보이도록 패딩, 여백, 폰트 크기 등을 조정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "잠재적 문제 분석 컴포넌트가 모바일 환경에서 최적화되도록 패딩, 여백, 폰트 크기 등을 조정합니다. 작은 화면에서도 문제점과 분석 내용이 명확하게 표시되도록 합니다.",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "ContractPreparationGuide 컴포넌트 반응형 개선",
            "description": "모바일 환경에서 더 잘 보이도록 패딩, 여백, 폰트 크기 등을 조정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "계약서 준비 가이드 컴포넌트가 모바일 환경에서 최적화되도록 패딩, 여백, 폰트 크기 등을 조정합니다. 작은 화면에서도 가이드라인이 명확하게 표시되도록 합니다.",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "PrintableReport 컴포넌트 반응형 개선",
            "description": "모바일 환경에서 더 잘 보이도록 패딩, 여백, 폰트 크기 등을 조정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "인쇄 가능한 보고서 컴포넌트가 모바일 환경에서 최적화되도록 패딩, 여백, 폰트 크기 등을 조정합니다. 작은 화면에서도 보고서 내용이 명확하게 표시되도록 합니다.",
            "testStrategy": ""
          },
          {
            "id": 11,
            "title": "RegistrationGuideModal 컴포넌트 반응형 개선",
            "description": "모바일 환경에서 더 잘 보이도록 패딩, 여백, 폰트 크기 등을 조정합니다.",
            "status": "done",
            "dependencies": [],
            "details": "등록 가이드 모달 컴포넌트가 모바일 환경에서 최적화되도록 패딩, 여백, 폰트 크기 등을 조정합니다. 작은 화면에서도 모달 내용이 명확하게 표시되도록 합니다.",
            "testStrategy": ""
          },
          {
            "id": 12,
            "title": "피드백 메커니즘 구현",
            "description": "사용자가 분석 결과에 대한 피드백을 제공할 수 있는 기능을 구현합니다.",
            "status": "in-progress",
            "dependencies": [],
            "details": "사용자가 분석 결과의 정확성과 유용성에 대한 피드백을 제공할 수 있는 메커니즘을 구현합니다. 별점 시스템과 코멘트 입력 필드를 포함하며, 제출된 피드백은 저장되고 사용자에게 감사 메시지가 표시됩니다.",
            "testStrategy": ""
          },
          {
            "id": 1,
            "title": "피드백 컴포넌트 UI 설계 및 구현",
            "description": "사용자가 분석 결과에 대한 피드백을 제공할 수 있는 UI 컴포넌트를 설계하고 구현합니다.",
            "details": "별점 시스템(1-5점)과 선택적 코멘트 입력 필드를 포함한 피드백 컴포넌트를 개발합니다. 사용자 친화적인 디자인으로 피드백 제공 과정을 간소화하고, 모바일 환경에서도 사용하기 쉽게 구현합니다. 테스트 전략: 별점 선택 기능, 코멘트 입력 및 유효성 검사, 제출 버튼 동작, 다양한 화면 크기에서의 반응형 테스트.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "분석 기록 목록 및 상세 화면 UI 개발",
        "description": "사용자의 분석 기록을 목록으로 보여주고, 선택 시 해당 분석 결과를 다시 볼 수 있는 화면을 구현합니다.",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "medium",
        "details": "1. 분석 기록 목록 화면 UI 디자인 및 구현\n2. 분석 기록 카드 컴포넌트 생성 (날짜, 파일명, 분석 결과 요약 표시)\n3. 분석 기록 필터링 및 정렬 기능 UI (날짜순, 위험도순 등)\n4. 분석 기록 검색 기능 UI\n5. 분석 기록 삭제 기능 UI (휴지통 아이콘)\n6. 빈 상태(분석 기록이 없을 때) UI 디자인\n7. 분석 기록 클릭 시 해당 분석 결과 화면으로 이동하는 네비게이션\n8. 페이지네이션 또는 무한 스크롤 UI\n9. 반응형 디자인 적용",
        "testStrategy": "1. 분석 기록 목록 화면의 UI 렌더링을 테스트합니다.\n2. 분석 기록 카드 컴포넌트의 데이터 표시 정확성을 검증합니다.\n3. 필터링 및 정렬 기능의 UI 동작을 테스트합니다.\n4. 검색 기능의 입력 및 결과 표시를 검증합니다.\n5. 삭제 아이콘의 클릭 이벤트를 테스트합니다.\n6. 빈 상태 UI의 표시 조건을 검증합니다.\n7. 분석 기록 클릭 시 네비게이션 동작을 테스트합니다.\n8. 페이지네이션 또는 무한 스크롤의 동작을 검증합니다.\n9. 다양한 화면 크기에서의 반응형 디자인을 테스트합니다.",
        "subtasks": [
          {
            "id": 1,
            "title": "분석 기록 목록 화면 레이아웃 구현",
            "description": "분석 기록을 표시할 메인 목록 화면의 기본 레이아웃을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "분석 기록 카드 컴포넌트 개발",
            "description": "날짜, 파일명, 분석 결과 요약을 표시하는 재사용 가능한 카드 컴포넌트를 생성합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "필터링 및 정렬 UI 구현",
            "description": "날짜순, 위험도순 등의 정렬 옵션과 필터링 기능을 위한 UI 컴포넌트를 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "검색 기능 UI 개발",
            "description": "분석 기록을 검색할 수 있는 검색바와 관련 UI를 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "삭제 아이콘 UI 구현",
            "description": "휴지통 아이콘(삭제) 기능을 위한 UI를 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "빈 상태 UI 디자인 및 구현",
            "description": "분석 기록이 없을 때 표시할 빈 상태 화면을 디자인하고 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "분석 결과 화면 네비게이션 구현",
            "description": "분석 기록 클릭 시 해당 분석 결과 화면으로 이동하는 네비게이션 로직을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "페이지네이션 또는 무한 스크롤 UI 구현",
            "description": "많은 분석 기록을 효율적으로 표시하기 위한 페이지네이션 또는 무한 스크롤 기능을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "반응형 디자인 적용",
            "description": "모바일, 태블릿, 데스크톱 환경에서 최적화된 화면을 제공하기 위한 반응형 디자인을 적용합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "등기부등본 발급 안내 페이지 생성",
        "description": "사용자에게 등기부등본 취득 방법을 안내하는 정보 페이지를 개발합니다.",
        "status": "done",
        "dependencies": [],
        "priority": "low",
        "details": "1. 등기부등본 발급에 관한 최신 정보를 조사하고 수집합니다.\n2. 명확한 지시사항이 포함된 단계별 가이드를 작성합니다.\n3. 가이드를 위한 직관적이고 사용자 친화적인 레이아웃을 설계하고 구현합니다.\n4. 이해를 돕기 위해 스크린샷이나 인포그래픽과 같은 시각적 자료를 포함합니다.\n5. 등기부등본 발급을 위한 공식 정부 자원 및 온라인 서비스 링크를 추가합니다.\n6. 일반적인 질문에 답변하는 FAQ 섹션을 구현합니다.\n7. 가이드의 인쇄 가능한 버전을 생성합니다.\n8. 사용자가 개선사항을 제안하거나 오래된 정보를 신고할 수 있는 피드백 메커니즘을 구현합니다.",
        "testStrategy": "1. 공식 출처와 정보의 정확성을 검증합니다.\n2. 사용자 피드백을 통해 지시사항의 가독성과 명확성을 테스트합니다.\n3. 모든 외부 링크가 유효하고 최신 상태인지 확인합니다.\n4. 인쇄 버전의 형식과 완성도를 테스트합니다.\n5. 피드백 메커니즘이 올바르게 작동하는지 확인합니다.",
        "subtasks": [
          {
            "id": 1,
            "title": "정보 수집 및 콘텐츠 작성",
            "description": "등기부등본 발급 절차, 필요 서류, 비용, 주의사항 등 관련 정보를 수집하고, 사용자 친화적인 안내 콘텐츠를 작성합니다.",
            "dependencies": [],
            "details": "공식 사이트(인터넷등기소)와 신뢰할 수 있는 블로그, 법률 정보 사이트에서 최신 발급 절차, 비용(열람 700원, 발급 1,000원), 준비물, 자주 묻는 질문 등을 조사합니다. 작성된 콘텐츠는 명확하고 단계별로 안내되도록 구성합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "페이지 레이아웃 및 디자인 구현",
            "description": "수집된 콘텐츠를 바탕으로 안내 페이지의 구조와 디자인을 설계 및 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "메인 안내, 절차 단계, 비용 안내, FAQ, 인쇄/피드백 버튼 등 주요 섹션을 배치합니다. 반응형 웹 디자인을 적용하고, 접근성과 가독성을 고려한 UI/UX를 구현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "시각적 자료 제작 및 통합",
            "description": "발급 절차를 설명하는 인포그래픽, 아이콘, 스크린샷 등 시각 자료를 제작하고 페이지에 통합합니다.",
            "dependencies": [
              2
            ],
            "details": "등기부등본 발급 사이트 화면, 단계별 절차 다이어그램, 주의사항 아이콘 등을 제작합니다. 이미지 최적화 및 대체 텍스트(alt text) 제공으로 접근성을 확보합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "FAQ 섹션 구현",
            "description": "자주 묻는 질문과 답변(FAQ) 섹션을 설계하고, 콘텐츠를 추가합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "실제 사용자 문의와 검색 결과를 바탕으로 FAQ 항목을 선정하고, 명확한 답변을 작성합니다. 아코디언 UI 등으로 가독성을 높입니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "인쇄 및 피드백 기능 개발",
            "description": "페이지 인쇄 기능과 사용자 피드백(의견 제출) 기능을 개발 및 테스트합니다.",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "인쇄 버튼 클릭 시 안내 페이지가 인쇄에 최적화된 레이아웃으로 출력되도록 CSS를 적용합니다. 피드백 폼은 간단한 입력(별점, 의견)과 제출 기능을 포함하며, 제출 후 확인 메시지를 제공합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "화이트/블랙 테마 지원 구현",
        "description": "애플리케이션 전체에서 화이트 및 블랙 테마에 대한 지원을 추가합니다.",
        "status": "done",
        "dependencies": [
          7
        ],
        "priority": "low",
        "details": "1. React Context API를 사용하여 테마 컨텍스트를 설정합니다.\n2. 테마 토글 컴포넌트를 생성합니다.\n3. TailwindCSS 구성에서 두 테마에 대한 색상 변수를 정의합니다.\n4. 모든 컴포넌트에 대해 테마별 스타일을 구현합니다.\n5. 두 테마 모두에서 접근성을 위한 적절한 대비율을 보장합니다.\n6. 테마 전환 시 부드러운 전환 효과를 추가합니다.\n7. 사용자의 테마 기본 설정을 로컬 스토리지에 저장합니다.\n8. 차트 및 시각화를 포함한 모든 UI 컴포넌트를 두 테마에서 테스트하고 조정합니다.",
        "testStrategy": "1. 모든 컴포넌트가 두 테마에서 올바르게 렌더링되는지 확인합니다.\n2. 테마 토글 기능을 테스트합니다.\n3. 두 테마의 접근성 준수(색상 대비)를 확인합니다.\n4. 테마 기본 설정이 올바르게 저장되는지 확인합니다.\n5. 다양한 브라우저와 기기에서 테마 렌더링을 테스트합니다.",
        "subtasks": [
          {
            "id": 1,
            "title": "테마 컨텍스트 및 훅 설정",
            "description": "화이트/블랙 테마 상태를 전역에서 관리할 수 있도록 React Context와 커스텀 훅(useTheme 등)을 구현합니다.",
            "dependencies": [],
            "details": "ThemeContext를 생성하고, 현재 테마와 테마 변경 함수를 제공하는 Provider를 구현합니다. 커스텀 훅을 통해 컴포넌트에서 테마 상태를 쉽게 사용할 수 있도록 합니다.\n<info added on 2025-06-25T14:06:45.890Z>\nThemeContext와 useTheme 훅 구현이 완료되었습니다:\n- src/contexts/ThemeContext.tsx 파일에 테마 상태 관리 로직 구현\n- 'light'와 'dark' 테마 값을 localStorage에 저장하여 새로고침 후에도 유지\n- prefers-color-scheme 미디어 쿼리를 활용한 시스템 기본 테마 감지 기능 추가\n- main.tsx에 ThemeProvider 추가하여 전체 앱에서 테마 컨텍스트 사용 가능\n</info added on 2025-06-25T14:06:45.890Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "테마 토글 컴포넌트 개발",
            "description": "사용자가 테마를 전환할 수 있는 UI 컴포넌트(스위치, 버튼 등)를 개발합니다.",
            "dependencies": [
              1
            ],
            "details": "ThemeContext의 테마 변경 함수를 사용하여 테마를 전환합니다. 접근성과 반응성을 고려한 UI를 구현합니다.\n<info added on 2025-06-25T14:10:18.729Z>\n테마 토글 컴포넌트를 성공적으로 구현했습니다:\n- src/components/ThemeToggle.tsx 파일을 생성하여 테마 전환 UI 구현\n- shadcn UI의 dropdown-menu 컴포넌트를 설치하고 활용\n- 라이트/다크/시스템 테마 옵션을 제공하는 드롭다운 메뉴 구현\n- 테마 아이콘(Sun, Moon, Monitor)을 사용하여 직관적인 UI 제공\n- 테마 전환 시 애니메이션 효과 추가\n- Navbar 컴포넌트에 테마 토글 버튼 통합\n- Navbar의 배경색을 테마에 맞게 변경 (bg-white → bg-background)\n</info added on 2025-06-25T14:10:18.729Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "TailwindCSS 테마 변수 구성",
            "description": "TailwindCSS에서 다크/라이트 테마에 따라 동적으로 스타일이 적용되도록 테마 변수 및 설정을 구성합니다.",
            "dependencies": [
              1
            ],
            "details": "tailwind.config.js에서 darkMode 옵션을 'class'로 설정하고, 테마별 색상 변수를 정의합니다. 테마 클래스(light/dark)를 body 또는 root에 적용하여 Tailwind 유틸리티가 동작하도록 합니다.\n<info added on 2025-06-25T14:12:12.970Z>\nTailwindCSS 테마 변수 구성 완료:\n- tailwind.config.js 파일의 darkMode 설정이 \"class\"로 확인됨\n- index.css 파일에 라이트/다크 모드 색상 변수가 적절히 정의되어 있음\n- 테마 전환 애니메이션을 위한 transition 속성 추가:\n  - background-color, border-color, color, box-shadow에 0.2~0.3초 전환 효과 적용\n  - 애니메이션이 필요 없는 요소를 위한 no-transition 클래스 구현\n- 모든 UI 컴포넌트가 테마 변수를 사용하고 있어 별도 수정 없이 테마 전환 가능\n</info added on 2025-06-25T14:12:12.970Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "컴포넌트별 테마 스타일 적용",
            "description": "각 UI 컴포넌트에 TailwindCSS 유틸리티와 테마 변수를 활용하여 테마별 스타일을 적용합니다.",
            "dependencies": [
              3
            ],
            "details": "버튼, 카드, 입력창 등 주요 컴포넌트에 'dark:' 접두사와 커스텀 변수로 테마별 스타일을 적용합니다. Storybook 등에서 테마별 렌더링을 확인합니다.\n<info added on 2025-06-25T14:17:30.213Z>\n컴포넌트별 테마 스타일 적용 완료:\n- 대부분의 컴포넌트는 이미 Tailwind CSS의 유틸리티 클래스와 Shadcn UI를 통해 테마 변수를 사용하고 있었습니다.\n- FileDropzone 컴포넌트에서 하드코딩된 색상 값을 테마 변수로 변경했습니다:\n  - 파란색 계열 → primary 색상 변수\n  - 빨간색 계열 → destructive 색상 변수\n  - 회색 계열 → foreground, muted-foreground, border 등의 변수\n  - 투명도를 활용한 배경색 처리 (예: bg-primary/10)\n- 테마 전환 시 자연스러운 색상 변화를 위해 opacity 변형을 활용했습니다.\n- 모든 컴포넌트가 테마 변수를 사용하도록 수정하여 다크 모드와 라이트 모드 모두에서 일관된 디자인을 유지합니다.\n</info added on 2025-06-25T14:17:30.213Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "테마 전환 애니메이션 구현",
            "description": "테마 전환 시 부드러운 색상 변화 등 애니메이션 효과를 추가합니다.",
            "dependencies": [
              2,
              4
            ],
            "details": "CSS transition 또는 TailwindCSS의 transition 유틸리티를 활용해 배경, 텍스트 등 주요 스타일의 전환을 자연스럽게 만듭니다. 빠른 전환과 지연 없는 애니메이션을 테스트합니다.\n<info added on 2025-06-25T14:20:19.763Z>\n테마 전환 애니메이션을 성공적으로 구현했습니다:\n- index.css에 전역 애니메이션 효과를 추가했습니다:\n  - background-color, border-color, color, box-shadow에 대한 부드러운 전환 효과 (0.2~0.3초)\n  - 애니메이션이 필요 없는 요소를 위한 no-transition 클래스 추가\n- ThemeToggle 컴포넌트에 특별한 애니메이션 효과를 적용했습니다:\n  - 햇빛/달 아이콘 간의 회전 및 크기 변화 애니메이션 (duration-500)\n  - 드롭다운 메뉴에 slide-in-from-top 애니메이션 효과 추가\n  - 현재 선택된 테마에 체크 아이콘 표시\n- 클라이언트 사이드 렌더링 문제를 해결하기 위해 isMounted 상태를 사용하여 hydration 이슈 방지\n- 테마 전환 시 부드러운 시각적 효과를 제공하여 사용자 경험 향상\n</info added on 2025-06-25T14:20:19.763Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "테마 설정 저장 및 불러오기 기능 개발",
            "description": "사용자의 테마 선택을 localStorage 등에 저장하고, 앱 시작 시 불러와 적용합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "테마 변경 시 localStorage에 저장하고, 초기 렌더링 시 저장된 값을 우선 적용합니다. 시스템 테마와 동기화 옵션도 고려합니다. 저장/불러오기 동작을 단위 테스트합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "PDF 파일 API 전송 기능 개발",
        "description": "업로드된 등기부등본 PDF 파일을 텍스트 추출 API로 전송하는 기능을 구현합니다.",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "1. PDF 파일 업로드를 위한 드래그 앤 드롭 컴포넌트 구현\n2. 파일 형식 및 크기 검증 (PDF만 허용, 최대 10MB)\n3. 업로드된 PDF 파일을 Python API 엔드포인트로 전송하는 함수 구현\n4. API 전송 중 로딩 상태 및 진행률 표시\n5. API 응답 처리 및 오류 핸들링\n6. 전송 성공/실패에 대한 사용자 피드백 제공\n7. 재전송 기능 구현\n8. 임시 파일 관리 및 메모리 최적화",
        "testStrategy": "1. 다양한 PDF 파일 업로드 및 API 전송 테스트\n2. 파일 형식 및 크기 제한 검증 (PDF만 허용, 최대 10MB)\n3. API 전송 중 로딩 상태 및 진행률 표시 정상 작동 확인\n4. API 응답 처리 및 다양한 오류 상황에 대한 핸들링 테스트\n5. 전송 실패 시 재전송 기능 테스트\n6. 대용량 파일 전송 시 메모리 사용량 및 성능 테스트\n7. 네트워크 연결 불안정 상황에서의 오류 처리 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "파일 업로드 컴포넌트 구현",
            "description": "사용자가 PDF 파일을 선택하고 업로드할 수 있는 UI 컴포넌트를 개발합니다.",
            "dependencies": [],
            "details": "1. 드래그 앤 드롭 기능 구현\n2. 파일 선택 버튼 구현\n3. 선택된 파일 미리보기 기능 추가\n4. 다중 파일 선택 지원 여부 결정\n5. 테스트 전략: 다양한 브라우저에서 파일 선택 기능 테스트, 다양한 크기의 PDF 파일 업로드 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "파일 유효성 검증 기능 개발",
            "description": "업로드된 파일이 PDF 형식인지, 크기 제한을 초과하지 않는지 등을 검증하는 기능을 개발합니다.",
            "dependencies": [
              1
            ],
            "details": "1. 파일 확장자 검증 (PDF만 허용)\n2. 파일 크기 제한 설정 및 검증\n3. PDF 파일 내용 유효성 검사\n4. 손상된 파일 감지 기능\n5. 테스트 전략: 유효하지 않은 파일 형식 테스트, 손상된 PDF 파일 테스트, 크기 제한 초과 파일 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "API 전송 함수 구현",
            "description": "검증된 PDF 파일을 서버 API로 전송하는 함수를 개발합니다.",
            "dependencies": [
              2
            ],
            "details": "1. API 엔드포인트 설정\n2. 인증 토큰 관리\n3. FormData 객체 생성 및 파일 첨부\n4. HTTP 요청 구현 (POST/PUT)\n5. 응답 처리 로직 구현\n6. 테스트 전략: 모의 서버를 사용한 API 호출 테스트, 네트워크 지연 상황 테스트, 서버 오류 응답 처리 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "로딩 상태 및 진행률 표시 기능 개발",
            "description": "파일 업로드 및 API 전송 과정에서 사용자에게 진행 상황을 표시하는 기능을 개발합니다.",
            "dependencies": [
              3
            ],
            "details": "1. 프로그레스 바 컴포넌트 구현\n2. 업로드 진행률 계산 로직 구현\n3. 로딩 스피너 구현\n4. 단계별 상태 표시 (검증 중, 업로드 중, 처리 중 등)\n5. 테스트 전략: 다양한 파일 크기에 따른 진행률 표시 테스트, 네트워크 속도 변화에 따른 동작 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "오류 처리 및 사용자 피드백 구현",
            "description": "파일 업로드 및 API 전송 과정에서 발생할 수 있는 오류를 처리하고 사용자에게 적절한 피드백을 제공합니다.",
            "dependencies": [
              3,
              4
            ],
            "details": "1. 오류 유형 분류 (파일 오류, 네트워크 오류, 서버 오류 등)\n2. 오류 메시지 컴포넌트 구현\n3. 재시도 메커니즘 구현\n4. 사용자 친화적인 오류 메시지 작성\n5. 테스트 전략: 다양한 오류 상황 시뮬레이션, 오류 메시지 가독성 테스트, 재시도 기능 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "파일 관리 및 최적화 기능 개발",
            "description": "업로드된 파일의 관리 및 전송 최적화 기능을 개발합니다.",
            "dependencies": [
              3,
              5
            ],
            "details": "1. 파일 캐싱 메커니즘 구현\n2. 대용량 파일 청크 단위 전송 구현\n3. 파일 압축 기능 검토 및 구현\n4. 업로드 이력 관리 기능\n5. 중복 파일 처리 로직\n6. 테스트 전략: 대용량 파일 처리 성능 테스트, 메모리 사용량 모니터링, 청크 전송 신뢰성 테스트",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "문서 분석을 위한 OpenAI GPT 통합",
        "description": "업로드된 PDF 파일에서 직접 텍스트를 추출하고 OpenAI GPT로 분석하는 기능을 구현합니다.",
        "status": "pending",
        "dependencies": [
          9
        ],
        "priority": "high",
        "details": "1. 프론트엔드에서 PDF 텍스트 추출을 위한 라이브러리 설치 (pdf-lib, react-pdf 등).\n2. 클라이언트 사이드에서 PDF 텍스트 추출 기능 구현.\n3. OpenAI API 클라이언트 설정 및 통합.\n4. 등기부등본 내용을 분석하기 위한 GPT-4 프롬프트 설계.\n5. 추출된 텍스트를 GPT API로 전송하고 응답을 처리하는 서비스 생성.\n6. API 호출에 대한 오류 처리 및 재시도 메커니즘 구현.\n7. Supabase에 GPT 분석 결과를 저장하기 위한 스키마 설계.\n8. 잠재적 사기 위험 식별의 정확성을 위한 프롬프트 최적화.\n9. 중복 API 호출을 방지하기 위한 캐싱 메커니즘 구현.\n10. API 사용량 및 비용에 대한 모니터링 설정.",
        "testStrategy": "1. 다양한 PDF 파일 형식에서 텍스트 추출 기능 테스트.\n2. 추출된 텍스트의 정확성 및 완전성 검증.\n3. 다양한 등기부등본 시나리오(위험 및 안전 사례 모두)로 GPT 분석 테스트.\n4. 알려진 사례에 대한 GPT 분석의 정확성 검증.\n5. 오류 처리 및 재시도 메커니즘 확인.\n6. API 사용량 및 비용 모니터링 및 최적화.\n7. PDF 처리 및 GPT 통합에서 데이터 처리의 보안 감사 수행.\n8. 클라이언트 사이드 PDF 처리 성능 테스트.",
        "subtasks": [
          {
            "id": 1,
            "title": "PDF 텍스트 추출 라이브러리 통합",
            "description": "PDF 문서에서 텍스트를 추출하기 위한 라이브러리를 선택하고 프로젝트에 통합합니다.",
            "dependencies": [],
            "details": "1. pdf.js, pdflib 등 다양한 PDF 텍스트 추출 라이브러리 비교 평가\n2. 선택한 라이브러리 설치 및 프로젝트 의존성에 추가\n3. 기본 텍스트 추출 기능 구현 및 테스트\n4. 다양한 PDF 형식(스캔된 문서, 텍스트 기반, 이미지 포함 등)에 대한 처리 방법 구현\n5. 테스트: 다양한 형식과 크기의 PDF 파일로 추출 정확도 및 성능 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "클라이언트 사이드 텍스트 추출 기능 구현",
            "description": "사용자가 업로드한 PDF 파일에서 브라우저에서 텍스트를 추출하는 기능을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "1. 파일 업로드 UI 컴포넌트 개발\n2. 업로드된 PDF 파일 처리 로직 구현\n3. 추출된 텍스트 표시 및 편집 기능 개발\n4. 대용량 파일 처리를 위한 청크 분할 및 진행 상태 표시 기능 구현\n5. 테스트: 다양한 브라우저에서의 호환성 테스트 및 대용량 파일 처리 성능 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "OpenAI API 클라이언트 설정",
            "description": "OpenAI API와 통신하기 위한 클라이언트 라이브러리를 설정하고 인증을 구성합니다.",
            "dependencies": [],
            "details": "1. OpenAI API 키 발급 및 환경 변수 설정\n2. API 클라이언트 라이브러리 선택 및 설치\n3. API 연결 테스트 및 기본 요청 구현\n4. API 요청 타임아웃 및 재시도 설정\n5. 테스트: API 연결 상태 확인 및 기본 요청 응답 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "GPT 프롬프트 설계 및 최적화",
            "description": "문서 분석을 위한 효과적인 GPT 프롬프트를 설계하고 최적화합니다.",
            "dependencies": [
              3
            ],
            "details": "1. 문서 분석 목적에 맞는 프롬프트 템플릿 설계\n2. 다양한 문서 유형에 대한 프롬프트 변형 개발\n3. 토큰 사용량을 최적화하기 위한 프롬프트 압축 전략 구현\n4. 프롬프트 템플릿 관리 시스템 개발\n5. 테스트: 다양한 문서 유형에 대한 프롬프트 효과성 평가 및 토큰 사용량 측정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "API 통신 및 응답 처리 서비스 개발",
            "description": "OpenAI API와의 통신을 관리하고 응답을 처리하는 서비스를 개발합니다.",
            "dependencies": [
              3,
              4
            ],
            "details": "1. API 요청 및 응답 처리를 위한 서비스 클래스 구현\n2. 스트리밍 응답 처리 기능 구현\n3. 응답 파싱 및 구조화 로직 개발\n4. API 응답 로깅 및 모니터링 기능 구현\n5. 테스트: 다양한 API 요청 시나리오에 대한 통합 테스트 및 응답 처리 정확성 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "오류 처리 및 재시도 메커니즘 구현",
            "description": "API 통신 및 텍스트 처리 과정에서 발생할 수 있는 오류를 처리하고 재시도 메커니즘을 구현합니다.",
            "dependencies": [
              2,
              5
            ],
            "details": "1. 일반적인 오류 유형 식별 및 처리 전략 수립\n2. 네트워크 오류 및 API 한도 초과 상황에 대한 재시도 로직 구현\n3. 사용자에게 오류 상황을 알리는 UI 컴포넌트 개발\n4. 오류 로깅 및 모니터링 시스템 구축\n5. 테스트: 다양한 오류 시나리오에 대한 시스템 복원력 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Supabase 데이터 저장 기능 개발",
            "description": "추출된 텍스트 및 GPT 분석 결과를 Supabase에 저장하는 기능을 개발합니다.",
            "dependencies": [
              5
            ],
            "details": "1. Supabase 프로젝트 설정 및 데이터베이스 스키마 설계\n2. 데이터 저장 및 조회 API 개발\n3. 사용자별 데이터 접근 제어 구현\n4. 대용량 텍스트 데이터 효율적 저장 전략 구현\n5. 테스트: 데이터 저장 및 조회 기능 정확성 검증 및 성능 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "캐싱 및 API 사용량 최적화",
            "description": "반복적인 API 호출을 줄이고 비용을 절감하기 위한 캐싱 및 사용량 최적화 기능을 구현합니다.",
            "dependencies": [
              5,
              7
            ],
            "details": "1. API 응답 캐싱 전략 설계 및 구현\n2. 유사 문서 및 쿼리에 대한 결과 재사용 메커니즘 개발\n3. API 사용량 모니터링 및 제한 기능 구현\n4. 비용 효율적인 모델 선택 로직 개발\n5. 테스트: 캐싱 효과 측정 및 API 사용량 감소 검증",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Supabase 실제 사용자 인증 구현",
        "description": "모든 화면 개발 완료 후 실제 Supabase Auth를 사용하여 사용자 인증 시스템을 구현합니다.",
        "details": "1. Supabase JS 클라이언트 설치 및 설정 (v2.24.0): npm install @supabase/supabase-js 및 환경 변수 설정\n2. React에서 Supabase Auth 컨텍스트 설정: AuthContext 생성 및 useAuth 훅 구현\n3. 이메일/비밀번호 인증 방법 구현: signUp, signIn, signOut 함수 구현\n4. 소셜 인증(Google, Facebook) 방법 구현 (선택사항): OAuth 제공자 설정 및 signInWithOAuth 구현\n5. 기존 로그인/회원가입 화면에 실제 인증 로직 연결: 임시 인증 코드를 실제 Supabase Auth 호출로 교체\n6. 보호된 라우트 설정 및 인증 미들웨어 구현: ProtectedRoute 컴포넌트 생성 및 라우터 설정\n7. 사용자 프로필 페이지 기능 추가: 사용자 정보 조회/수정 기능 구현\n8. 비밀번호 재설정 기능 구현: resetPasswordForEmail 및 updateUser 함수 활용\n9. 사용자 데이터 접근 제어를 위한 Supabase 정책 설정: RLS(Row Level Security) 정책 구성\n10. 기존 임시 인증 코드 제거 및 실제 인증으로 교체: 모든 컴포넌트에서 실제 인증 상태 확인",
        "testStrategy": "1. 이메일/비밀번호 회원가입 및 로그인 기능 테스트\n2. 소셜 로그인(Google, Facebook) 플로우 테스트\n3. 보호된 라우트 접근 제어 테스트 (인증되지 않은 사용자 리다이렉트 확인)\n4. 사용자 프로필 정보 조회 및 수정 기능 테스트\n5. 비밀번호 재설정 이메일 발송 및 재설정 프로세스 테스트\n6. 세션 만료 및 자동 로그아웃 기능 테스트\n7. Supabase RLS 정책이 올바르게 적용되는지 데이터베이스 레벨에서 확인\n8. 다양한 브라우저에서 인증 상태 유지 테스트\n9. 네트워크 오류 시 인증 오류 처리 테스트\n10. 기존 임시 인증 코드가 완전히 제거되었는지 코드 검토",
        "status": "in-progress",
        "dependencies": [
          8
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Supabase 클라이언트 설정",
            "description": "프로젝트에 Supabase를 연결하고 클라이언트를 설정합니다.",
            "dependencies": [],
            "details": "1. Supabase 프로젝트 생성 및 API 키 확보\n2. 필요한 패키지 설치 (@supabase/supabase-js)\n3. 환경 변수 설정 (SUPABASE_URL, SUPABASE_ANON_KEY)\n4. 클라이언트 초기화 코드 작성 및 싱글톤 패턴 구현\n5. 기본 연결 테스트 구현\n\n테스트 전략: 클라이언트가 올바르게 초기화되는지 확인하는 단위 테스트 작성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "인증 컨텍스트 및 훅 구현",
            "description": "React 애플리케이션 전체에서 사용할 인증 상태 관리 컨텍스트와 커스텀 훅을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "1. AuthContext 생성 (사용자 상태, 로딩 상태, 에러 상태 관리)\n2. AuthProvider 컴포넌트 구현\n3. useAuth 커스텀 훅 개발\n4. 세션 지속성 및 자동 로그인 기능 구현\n5. 로그아웃 기능 구현\n\n테스트 전략: 컨텍스트 상태 변화와 훅 동작을 검증하는 단위 테스트 작성\n<info added on 2025-06-25T15:52:36.568Z>\n구현 완료 사항:\n- AuthContext 생성 및 useAuthContext 훅 구현 완료\n- 로그인 상태 관리 기능 구현\n- 로그인/로그아웃 기능 구현\n- localStorage를 활용한 인증 상태 지속성 구현\n\n현재 상태:\n- Supabase 연동 대신 임시로 localStorage를 사용하여 사용자 정보 저장 중\n- 추후 실제 Supabase 인증 서비스로 교체 예정\n\n다음 단계:\n- 실제 Supabase 인증 서비스와 연동하여 임시 구현 코드 교체\n- 세션 관리 로직 Supabase 세션 관리로 마이그레이션\n</info added on 2025-06-25T15:52:36.568Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "이메일/비밀번호 인증 기능 개발",
            "description": "이메일과 비밀번호를 사용한 기본 인증 기능을 구현합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "1. 회원가입 기능 구현 (이메일/비밀번호)\n2. 로그인 기능 구현\n3. 이메일 확인 프로세스 구현\n4. 비밀번호 재설정 기능 구현\n5. 폼 유효성 검사 및 에러 처리\n\n테스트 전략: 각 인증 기능에 대한 통합 테스트 및 에러 케이스 테스트 작성\n<info added on 2025-06-25T15:53:23.782Z>\n구현 상태:\n- 이메일/비밀번호 기반 인증 기능 구현 완료\n- 테스트용 계정: test@example.com/123456\n- 로그인 폼 유효성 검사 구현\n- 로그인 성공 시 AuthContext를 통해 사용자 정보 저장\n- 로그인 상태에 따른 UI 변경 구현:\n  - 홈페이지 버튼 동적 변경\n  - 네비게이션 바 메뉴 동적 변경\n</info added on 2025-06-25T15:53:23.782Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "소셜 인증 기능 구현",
            "description": "Google, GitHub 등 소셜 로그인 기능을 구현합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "1. Supabase 대시보드에서 소셜 공급자 설정\n2. OAuth 리디렉션 URL 설정\n3. 소셜 로그인 버튼 및 UI 구현\n4. 소셜 인증 후 사용자 정보 처리\n5. 소셜 계정과 기존 계정 연결 기능 구현\n\n테스트 전략: 소셜 로그인 플로우를 모킹하여 통합 테스트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "보호된 라우트 및 인증 미들웨어 설정",
            "description": "인증된 사용자만 접근할 수 있는 보호된 라우트와 인증 미들웨어를 구현합니다.",
            "dependencies": [
              2,
              3
            ],
            "details": "1. ProtectedRoute 컴포넌트 구현\n2. 인증 상태에 따른 라우팅 로직 개발\n3. 인증 미들웨어 구현 (API 요청 시 토큰 첨부)\n4. 세션 만료 처리 및 자동 갱신 기능\n5. 권한 기반 접근 제어 구현\n\n테스트 전략: 다양한 인증 상태에서 라우팅 동작을 검증하는 테스트 작성\n<info added on 2025-06-25T15:54:18.919Z>\n구현 진행 상황:\n- 로그인 상태에 따른 네비게이션 바 메뉴 조건부 렌더링 완료\n- 비로그인 사용자: 로그인 버튼만 표시\n- 로그인 사용자: 업로드, 기록, 등기안내, 프로필 등 모든 메뉴 접근 가능\n- 라우터 레벨의 보호 기능(ProtectedRoute)은 아직 미구현 상태\n</info added on 2025-06-25T15:54:18.919Z>",
            "status": "in-progress",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "사용자 프로필 및 비밀번호 관리 기능 개발",
            "description": "사용자 프로필 정보 관리 및 비밀번호 변경 기능을 구현합니다.",
            "dependencies": [
              3
            ],
            "details": "1. 사용자 프로필 조회 및 수정 기능 구현\n2. 프로필 이미지 업로드 기능 구현\n3. 비밀번호 변경 기능 구현\n4. 계정 삭제 기능 구현\n5. 사용자 설정 저장 기능 구현\n\n테스트 전략: 프로필 관리 기능에 대한 통합 테스트 및 에러 처리 테스트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "기존 임시 인증 코드 교체 및 테스트",
            "description": "기존의 임시 인증 코드를 Supabase 인증으로 교체하고 전체 시스템을 테스트합니다.",
            "dependencies": [
              3,
              4,
              5,
              6
            ],
            "details": "1. 기존 인증 코드 식별 및 마이그레이션 계획 수립\n2. 점진적으로 코드 교체 진행\n3. 인증 관련 UI 컴포넌트 업데이트\n4. 전체 인증 플로우 테스트\n5. 성능 및 보안 테스트 수행\n\n테스트 전략: E2E 테스트를 통해 전체 인증 플로우 검증 및 회귀 테스트 수행",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-22T07:46:06.249Z",
      "updated": "2025-06-25T15:54:46.803Z",
      "description": "Tasks for master context"
    }
  }
}