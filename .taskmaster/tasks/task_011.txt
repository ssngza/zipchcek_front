# Task ID: 11
# Title: Supabase 실제 사용자 인증 구현
# Status: in-progress
# Dependencies: 8
# Priority: medium
# Description: 모든 화면 개발 완료 후 실제 Supabase Auth를 사용하여 사용자 인증 시스템을 구현합니다.
# Details:
1. Supabase JS 클라이언트 설치 및 설정 (v2.24.0): npm install @supabase/supabase-js 및 환경 변수 설정
2. React에서 Supabase Auth 컨텍스트 설정: AuthContext 생성 및 useAuth 훅 구현
3. 이메일/비밀번호 인증 방법 구현: signUp, signIn, signOut 함수 구현
4. 소셜 인증(Google, Facebook, Naver) 방법 구현: OAuth 제공자 설정 및 signInWithOAuth 구현
5. 기존 로그인/회원가입 화면에 실제 인증 로직 연결: 임시 인증 코드를 실제 Supabase Auth 호출로 교체
6. 보호된 라우트 설정 및 인증 미들웨어 구현: ProtectedRoute 컴포넌트 생성 및 라우터 설정
7. 사용자 프로필 페이지 기능 추가: 사용자 정보 조회/수정 기능 구현
8. 비밀번호 재설정 기능 구현: resetPasswordForEmail 및 updateUser 함수 활용
9. 사용자 데이터 접근 제어를 위한 Supabase 정책 설정: RLS(Row Level Security) 정책 구성
10. 기존 임시 인증 코드 제거 및 실제 인증으로 교체: 모든 컴포넌트에서 실제 인증 상태 확인

# Test Strategy:
1. 이메일/비밀번호 회원가입 및 로그인 기능 테스트
2. 소셜 로그인(Google, Facebook, Naver) 플로우 테스트
3. 보호된 라우트 접근 제어 테스트 (인증되지 않은 사용자 리다이렉트 확인)
4. 사용자 프로필 정보 조회 및 수정 기능 테스트
5. 비밀번호 재설정 이메일 발송 및 재설정 프로세스 테스트
6. 세션 만료 및 자동 로그아웃 기능 테스트
7. Supabase RLS 정책이 올바르게 적용되는지 데이터베이스 레벨에서 확인
8. 다양한 브라우저에서 인증 상태 유지 테스트
9. 네트워크 오류 시 인증 오류 처리 테스트
10. 기존 임시 인증 코드가 완전히 제거되었는지 코드 검토

# Subtasks:
## 1. Supabase 클라이언트 설정 [pending]
### Dependencies: None
### Description: 프로젝트에 Supabase 클라이언트를 설정하고 초기화합니다.
### Details:
1. Supabase 라이브러리 설치 (@supabase/supabase-js)
2. 환경 변수 설정 (SUPABASE_URL, SUPABASE_ANON_KEY)
3. 클라이언트 초기화 코드 작성
4. 클라이언트 인스턴스를 앱 전체에서 사용할 수 있도록 설정
5. 테스트: 클라이언트 연결 확인 및 기본 쿼리 테스트

## 2. 인증 컨텍스트 및 훅 구현 [pending]
### Dependencies: 11.1
### Description: React 컨텍스트와 커스텀 훅을 사용하여 인증 상태 관리 시스템을 구현합니다.
### Details:
1. AuthContext 생성 (사용자 상태, 로딩 상태 관리)
2. useAuth 커스텀 훅 구현
3. 세션 관리 및 자동 새로고침 기능 구현
4. 로그인/로그아웃 상태 변경 시 이벤트 처리
5. 테스트: 컨텍스트 상태 변경 및 훅 기능 테스트

## 3. 이메일/비밀번호 인증 기능 개발 [pending]
### Dependencies: 11.1, 11.2
### Description: 이메일과 비밀번호를 사용한 기본 인증 기능을 구현합니다.
### Details:
1. 회원가입 기능 구현
2. 로그인 기능 구현
3. 이메일 확인 프로세스 설정
4. 비밀번호 재설정 기능 구현
5. 폼 유효성 검사 및 오류 처리
6. 테스트: 각 인증 흐름에 대한 통합 테스트

## 4. 소셜 인증 기능 구현 [done]
### Dependencies: 11.1, 11.2
### Description: Google, GitHub, Naver 등 소셜 미디어를 통한 인증 기능을 구현합니다.
### Details:
1. Supabase 대시보드에서 소셜 공급자 설정 (Google, Facebook, Naver)
2. 네이버 개발자 센터에서 애플리케이션 등록 및 API 키 발급
3. Supabase에 네이버 OAuth 제공자 설정 및 리디렉션 URL 구성
4. 소셜 로그인 버튼 및 UI 구현 (네이버 로그인 버튼 추가)
5. OAuth 리디렉션 처리 (네이버 인증 응답 처리 포함)
6. 소셜 계정 연결 및 관리 기능
7. 네이버 로그인 성공 후 사용자 프로필 정보 가져오기 구현
8. 테스트: 각 소셜 공급자별 인증 흐름 테스트 (네이버 로그인 테스트 포함)
<info added on 2025-06-25T16:22:23.647Z>
네이버 소셜 로그인 구현 완료:
- Supabase를 통한 OAuth 인증 흐름 설정 완료
- 네이버 로그인 버튼 컴포넌트 개발 및 로그인 페이지에 통합
- OAuth 콜백 처리 컴포넌트 구현 및 라우트 설정
- 환경 변수를 통한 네이버 개발자 API 키 및 시크릿 설정 구조 마련
- 추후 실제 네이버 개발자 센터 애플리케이션 등록 정보로 교체 필요
</info added on 2025-06-25T16:22:23.647Z>

## 5. 보호된 라우트 및 인증 미들웨어 설정 [pending]
### Dependencies: 11.2, 11.3
### Description: 인증된 사용자만 접근할 수 있는 보호된 라우트와 인증 미들웨어를 구현합니다.
### Details:
1. ProtectedRoute 컴포넌트 구현
2. 인증 상태에 따른 리디렉션 로직 구현
3. 라우트 가드 설정
4. 인증 미들웨어 구현 (API 요청 시 토큰 첨부)
5. 세션 만료 처리
6. 테스트: 인증/비인증 상태에서의 라우트 접근 테스트

## 6. 네이버 소셜 로그인 구현 [done]
### Dependencies: 11.1, 11.2, 11.4
### Description: 네이버 소셜 로그인 기능을 구현하고 Supabase와 통합합니다.
### Details:
1. 네이버 개발자 센터에서 애플리케이션 등록 및 설정
2. 네이버 로그인 API 키 및 시크릿 발급
3. Supabase Auth 설정에서 네이버 OAuth 제공자 추가
4. 네이버 로그인 버튼 컴포넌트 구현
5. 네이버 로그인 콜백 처리 로직 구현
6. 네이버 사용자 프로필 정보 가져오기 및 저장
7. 네이버 로그인 오류 처리 및 예외 상황 관리
8. 네이버 계정과 기존 계정 연동 기능 구현

