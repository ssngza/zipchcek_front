# Task ID: 12
# Title: 다단계 Docker 배포 설정을 위한 Dockerfile 작성
# Status: pending
# Dependencies: 8, 11
# Priority: medium
# Description: Node.js 18 Alpine 이미지로 빌드 환경을 구성하고, Nginx Alpine 이미지로 실행 환경을 구성하는 다단계 빌드 Dockerfile을 작성합니다.
# Details:
1. 빌드 단계 구성:
   - Node.js 18 Alpine 이미지를 기반으로 빌드 스테이지 설정
   - 필요한 종속성 설치 (package.json, package-lock.json 복사 후 npm ci 실행)
   - 소스 코드 복사 및 빌드 실행 (npm run build)
   - 빌드 결과물 최적화 (불필요한 파일 제거)

2. 실행 단계 구성:
   - Nginx Alpine 이미지를 기반으로 실행 스테이지 설정
   - 빌드 스테이지에서 생성된 정적 파일을 Nginx 서버 디렉토리로 복사
   - Nginx 설정 파일 구성 (React SPA를 위한 설정 포함)
   - 보안 강화를 위한 Nginx 설정 최적화

3. 이미지 최적화:
   - 불필요한 개발 종속성 제외
   - .dockerignore 파일 작성으로 불필요한 파일 제외
   - 레이어 최소화를 위한 명령어 체이닝
   - 최종 이미지 크기 최적화 전략 적용

4. 환경 변수 설정:
   - 빌드 시 필요한 환경 변수 구성
   - 런타임 환경 변수 처리 방법 구현
   - 환경별(개발/테스트/프로덕션) 설정 분리

5. 보안 고려사항:
   - 루트가 아닌 사용자로 애플리케이션 실행
   - 최소 권한 원칙 적용
   - 보안 취약점이 있는 패키지 스캔 및 제거

6. 문서화:
   - Dockerfile 내 주석 추가
   - 빌드 및 실행 방법에 대한 README 업데이트

# Test Strategy:
1. 로컬 환경에서 Dockerfile 빌드 테스트:
   - docker build -t app:latest . 명령으로 이미지 빌드 성공 확인
   - 빌드 과정에서 오류가 없는지 확인
   - 최종 이미지 크기 확인 및 목표 크기(100MB 이하) 달성 여부 검증

2. 컨테이너 실행 테스트:
   - docker run -p 8080:80 app:latest 명령으로 컨테이너 실행
   - 웹 브라우저에서 http://localhost:8080 접속하여 애플리케이션 정상 작동 확인
   - 모든 정적 자원(이미지, CSS, JS)이 올바르게 제공되는지 확인

3. 다양한 환경 변수 테스트:
   - 개발, 테스트, 프로덕션 환경별 환경 변수 설정 테스트
   - 환경 변수 주입 방식 검증 (docker run -e 옵션 사용)

4. 성능 테스트:
   - 컨테이너 시작 시간 측정
   - 메모리 사용량 모니터링
   - 정적 파일 서빙 성능 확인

5. 보안 테스트:
   - Docker 이미지 취약점 스캔 도구(Trivy, Clair 등) 실행
   - 컨테이너 내부에서 실행 중인 프로세스의 권한 확인
   - 불필요한 포트가 노출되지 않았는지 확인

6. CI/CD 파이프라인 통합 테스트:
   - GitHub Actions 또는 다른 CI/CD 도구에서 이미지 빌드 테스트
   - 자동화된 빌드 및 배포 프로세스 검증
