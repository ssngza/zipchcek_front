# Task ID: 8
# Title: 화이트/블랙 테마 지원 구현
# Status: done
# Dependencies: 7
# Priority: low
# Description: 애플리케이션 전체에서 화이트 및 블랙 테마에 대한 지원을 추가합니다.
# Details:
1. React Context API를 사용하여 테마 컨텍스트를 설정합니다.
2. 테마 토글 컴포넌트를 생성합니다.
3. TailwindCSS 구성에서 두 테마에 대한 색상 변수를 정의합니다.
4. 모든 컴포넌트에 대해 테마별 스타일을 구현합니다.
5. 두 테마 모두에서 접근성을 위한 적절한 대비율을 보장합니다.
6. 테마 전환 시 부드러운 전환 효과를 추가합니다.
7. 사용자의 테마 기본 설정을 로컬 스토리지에 저장합니다.
8. 차트 및 시각화를 포함한 모든 UI 컴포넌트를 두 테마에서 테스트하고 조정합니다.

# Test Strategy:
1. 모든 컴포넌트가 두 테마에서 올바르게 렌더링되는지 확인합니다.
2. 테마 토글 기능을 테스트합니다.
3. 두 테마의 접근성 준수(색상 대비)를 확인합니다.
4. 테마 기본 설정이 올바르게 저장되는지 확인합니다.
5. 다양한 브라우저와 기기에서 테마 렌더링을 테스트합니다.

# Subtasks:
## 1. 테마 컨텍스트 및 훅 설정 [done]
### Dependencies: None
### Description: 화이트/블랙 테마 상태를 전역에서 관리할 수 있도록 React Context와 커스텀 훅(useTheme 등)을 구현합니다.
### Details:
ThemeContext를 생성하고, 현재 테마와 테마 변경 함수를 제공하는 Provider를 구현합니다. 커스텀 훅을 통해 컴포넌트에서 테마 상태를 쉽게 사용할 수 있도록 합니다.
<info added on 2025-06-25T14:06:45.890Z>
ThemeContext와 useTheme 훅 구현이 완료되었습니다:
- src/contexts/ThemeContext.tsx 파일에 테마 상태 관리 로직 구현
- 'light'와 'dark' 테마 값을 localStorage에 저장하여 새로고침 후에도 유지
- prefers-color-scheme 미디어 쿼리를 활용한 시스템 기본 테마 감지 기능 추가
- main.tsx에 ThemeProvider 추가하여 전체 앱에서 테마 컨텍스트 사용 가능
</info added on 2025-06-25T14:06:45.890Z>

## 2. 테마 토글 컴포넌트 개발 [done]
### Dependencies: 8.1
### Description: 사용자가 테마를 전환할 수 있는 UI 컴포넌트(스위치, 버튼 등)를 개발합니다.
### Details:
ThemeContext의 테마 변경 함수를 사용하여 테마를 전환합니다. 접근성과 반응성을 고려한 UI를 구현합니다.
<info added on 2025-06-25T14:10:18.729Z>
테마 토글 컴포넌트를 성공적으로 구현했습니다:
- src/components/ThemeToggle.tsx 파일을 생성하여 테마 전환 UI 구현
- shadcn UI의 dropdown-menu 컴포넌트를 설치하고 활용
- 라이트/다크/시스템 테마 옵션을 제공하는 드롭다운 메뉴 구현
- 테마 아이콘(Sun, Moon, Monitor)을 사용하여 직관적인 UI 제공
- 테마 전환 시 애니메이션 효과 추가
- Navbar 컴포넌트에 테마 토글 버튼 통합
- Navbar의 배경색을 테마에 맞게 변경 (bg-white → bg-background)
</info added on 2025-06-25T14:10:18.729Z>

## 3. TailwindCSS 테마 변수 구성 [done]
### Dependencies: 8.1
### Description: TailwindCSS에서 다크/라이트 테마에 따라 동적으로 스타일이 적용되도록 테마 변수 및 설정을 구성합니다.
### Details:
tailwind.config.js에서 darkMode 옵션을 'class'로 설정하고, 테마별 색상 변수를 정의합니다. 테마 클래스(light/dark)를 body 또는 root에 적용하여 Tailwind 유틸리티가 동작하도록 합니다.
<info added on 2025-06-25T14:12:12.970Z>
TailwindCSS 테마 변수 구성 완료:
- tailwind.config.js 파일의 darkMode 설정이 "class"로 확인됨
- index.css 파일에 라이트/다크 모드 색상 변수가 적절히 정의되어 있음
- 테마 전환 애니메이션을 위한 transition 속성 추가:
  - background-color, border-color, color, box-shadow에 0.2~0.3초 전환 효과 적용
  - 애니메이션이 필요 없는 요소를 위한 no-transition 클래스 구현
- 모든 UI 컴포넌트가 테마 변수를 사용하고 있어 별도 수정 없이 테마 전환 가능
</info added on 2025-06-25T14:12:12.970Z>

## 4. 컴포넌트별 테마 스타일 적용 [done]
### Dependencies: 8.3
### Description: 각 UI 컴포넌트에 TailwindCSS 유틸리티와 테마 변수를 활용하여 테마별 스타일을 적용합니다.
### Details:
버튼, 카드, 입력창 등 주요 컴포넌트에 'dark:' 접두사와 커스텀 변수로 테마별 스타일을 적용합니다. Storybook 등에서 테마별 렌더링을 확인합니다.
<info added on 2025-06-25T14:17:30.213Z>
컴포넌트별 테마 스타일 적용 완료:
- 대부분의 컴포넌트는 이미 Tailwind CSS의 유틸리티 클래스와 Shadcn UI를 통해 테마 변수를 사용하고 있었습니다.
- FileDropzone 컴포넌트에서 하드코딩된 색상 값을 테마 변수로 변경했습니다:
  - 파란색 계열 → primary 색상 변수
  - 빨간색 계열 → destructive 색상 변수
  - 회색 계열 → foreground, muted-foreground, border 등의 변수
  - 투명도를 활용한 배경색 처리 (예: bg-primary/10)
- 테마 전환 시 자연스러운 색상 변화를 위해 opacity 변형을 활용했습니다.
- 모든 컴포넌트가 테마 변수를 사용하도록 수정하여 다크 모드와 라이트 모드 모두에서 일관된 디자인을 유지합니다.
</info added on 2025-06-25T14:17:30.213Z>

## 5. 테마 전환 애니메이션 구현 [done]
### Dependencies: 8.2, 8.4
### Description: 테마 전환 시 부드러운 색상 변화 등 애니메이션 효과를 추가합니다.
### Details:
CSS transition 또는 TailwindCSS의 transition 유틸리티를 활용해 배경, 텍스트 등 주요 스타일의 전환을 자연스럽게 만듭니다. 빠른 전환과 지연 없는 애니메이션을 테스트합니다.
<info added on 2025-06-25T14:20:19.763Z>
테마 전환 애니메이션을 성공적으로 구현했습니다:
- index.css에 전역 애니메이션 효과를 추가했습니다:
  - background-color, border-color, color, box-shadow에 대한 부드러운 전환 효과 (0.2~0.3초)
  - 애니메이션이 필요 없는 요소를 위한 no-transition 클래스 추가
- ThemeToggle 컴포넌트에 특별한 애니메이션 효과를 적용했습니다:
  - 햇빛/달 아이콘 간의 회전 및 크기 변화 애니메이션 (duration-500)
  - 드롭다운 메뉴에 slide-in-from-top 애니메이션 효과 추가
  - 현재 선택된 테마에 체크 아이콘 표시
- 클라이언트 사이드 렌더링 문제를 해결하기 위해 isMounted 상태를 사용하여 hydration 이슈 방지
- 테마 전환 시 부드러운 시각적 효과를 제공하여 사용자 경험 향상
</info added on 2025-06-25T14:20:19.763Z>

## 6. 테마 설정 저장 및 불러오기 기능 개발 [done]
### Dependencies: 8.1, 8.2
### Description: 사용자의 테마 선택을 localStorage 등에 저장하고, 앱 시작 시 불러와 적용합니다.
### Details:
테마 변경 시 localStorage에 저장하고, 초기 렌더링 시 저장된 값을 우선 적용합니다. 시스템 테마와 동기화 옵션도 고려합니다. 저장/불러오기 동작을 단위 테스트합니다.

