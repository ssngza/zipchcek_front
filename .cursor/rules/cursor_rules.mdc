---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
# Git 커밋 메시지 형식 규칙

## **커밋 메시지 형식**
- **기본 형식**: `[Task TaskID] type: description`
- **예시**: `[Task 1.3] feat: TailwindCSS와 Shadcn UI 설정 완료`

## **Task ID 형식**
- **메인 작업**: `[Task 1]`, `[Task 2]`, `[Task 3]` 등
- **세부 작업**: `[Task 1.1]`, `[Task 1.2]`, `[Task 2.3]` 등
- **다중 작업**: `[Task 1.1,1.2]` (여러 세부작업 동시 완료 시)

## **커밋 타입**
- **feat**: 새로운 기능 추가
- **fix**: 버그 수정
- **refactor**: 코드 리팩토링
- **style**: 코드 스타일 변경 (기능 변경 없음)
- **docs**: 문서 변경
- **test**: 테스트 코드 추가/수정
- **chore**: 빌드 과정 또는 보조 도구 변경

## **예시 커밋 메시지**
```
✅ 올바른 예시:
[Task 1.3] feat: TailwindCSS와 Shadcn UI 라이브러리 설정
[Task 2.1] feat: React Router 기본 라우팅 구조 구현
[Task 3.2] feat: 드래그 앤 드롭 파일 업로드 컴포넌트 개발
[Task 1.4,1.5] chore: ESLint, Prettier 설정 및 프로젝트 문서화
[Task 10.1] fix: PDF 텍스트 추출 라이브러리 오류 수정

❌ 잘못된 예시:
Add new feature
Update UI components
Fix bug in upload
```

## **커밋 메시지 작성 가이드라인**
- **한국어 설명 사용**: 작업 내용을 한국어로 명확하게 설명
- **동사형 사용**: "구현", "개발", "수정", "추가" 등의 동사 사용
- **50자 이내**: 제목은 50자 이내로 간결하게 작성
- **현재 진행 중인 작업 우선**: Task Master의 현재 작업 상태와 일치

## **Task Master 연동**
- 커밋 전 `tm next` 명령으로 다음 작업 확인
- 작업 완료 후 `tm set-status [TaskID] done` 명령으로 상태 업데이트
- 복잡한 작업은 세부 작업 단위로 커밋 분할

---

# Shadcn UI 컴포넌트 추가 규칙

## **컴포넌트 설치 명령 형식**
- **기본 형식**: `npx shadcn@latest add [component-name]`
- **여러 컴포넌트**: `npx shadcn@latest add button input card`

## **자주 사용하는 컴포넌트 명령어**
```bash
# 기본 UI 컴포넌트
npx shadcn@latest add button
npx shadcn@latest add input
npx shadcn@latest add card
npx shadcn@latest add dialog
npx shadcn@latest add dropdown-menu
npx shadcn@latest add form
npx shadcn@latest add label
npx shadcn@latest add select
npx shadcn@latest add textarea
npx shadcn@latest add toast

# 레이아웃 컴포넌트
npx shadcn@latest add sheet
npx shadcn@latest add tabs
npx shadcn@latest add accordion
npx shadcn@latest add separator

# 피드백 컴포넌트
npx shadcn@latest add alert
npx shadcn@latest add badge
npx shadcn@latest add progress
npx shadcn@latest add skeleton

# 네비게이션 컴포넌트
npx shadcn@latest add navigation-menu
npx shadcn@latest add breadcrumb
npx shadcn@latest add pagination
```

## **컴포넌트 추가 워크플로우**
1. **필요한 컴포넌트 확인**: 디자인/요구사항에서 필요한 UI 컴포넌트 파악
2. **명령어 실행**: `npx shadcn@latest add [component-name]`
3. **자동 생성 확인**: `src/components/ui/` 디렉토리에 컴포넌트 파일 생성 확인
4. **import 및 사용**: 생성된 컴포넌트를 프로젝트에서 import하여 사용

## **컴포넌트 사용 예시**
```typescript
// Button 컴포넌트 사용
import { Button } from "@/components/ui/button"

function MyComponent() {
  return (
    <Button variant="default" size="lg">
      클릭하세요
    </Button>
  )
}

// Card 컴포넌트 사용
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

function MyCard() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>제목</CardTitle>
      </CardHeader>
      <CardContent>
        <p>내용</p>
      </CardContent>
    </Card>
  )
}
```

## **주의사항**
- **components.json 필요**: Shadcn UI 설정 파일이 프로젝트 루트에 존재해야 함
- **TailwindCSS 필수**: Shadcn UI는 TailwindCSS에 의존
- **TypeScript 지원**: 모든 컴포넌트는 TypeScript로 작성됨
- **커스터마이징 가능**: 생성된 컴포넌트는 프로젝트 요구사항에 맞게 수정 가능

---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 